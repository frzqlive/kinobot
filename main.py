import requests
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage

TOKEN = 'TOKEN'
API_URL = 'https://api.kinopoisk.dev/v1.3/movie/random'

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é')
    keyboard.add(button)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º.', reply_markup=keyboard)


@dp.message_handler(text='–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é')
async def get_recommendation(message: types.Message):
    headers = {'accept': 'application/json', 'X-API-KEY': 'X-API-KEY'}
    response = requests.get(API_URL, headers=headers)

    if response.status_code == 200:
        film = response.json()
        title = film.get('name')
        poster = film.get('poster').get('url')
        description = film.get('description')
        rating = round(film.get('rating').get('kp'), 1)

        if description is None:
            description = 'üñ§'

        truncated_description = truncate(description, 1024)

        text = f'<b>{title}</b>\n\n' \
               f'{truncated_description}\n\n' \
               f'–†–µ–π—Ç–∏–Ω–≥: {rating}'

        await bot.send_photo(message.chat.id, poster, caption=text, parse_mode='HTML')
    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')


@dp.message_handler()
async def unknown_command(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")


def truncate(text, max_length):
    if len(text) > max_length:
        return text[:max_length-3] + '...'
    return text


if __name__ == '__main__':
    async def main():
        await dp.start_polling()

    asyncio.run(main())